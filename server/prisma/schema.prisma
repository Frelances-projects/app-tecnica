generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Information {
  id          String   @id
  name        String
  description String
  date        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("information")
}

model Class {
  id             String           @id
  name           String
  code           Int              @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  scheduledClass ScheduledClass[]

  @@map("classes")
}

model Calendar {
  id        String   @id
  fileUrl   String
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("calendars")
}

model School {
  id        String    @id
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Student   Student[]

  @@map("schools")
}

model User {
  id        String       @id
  name      String
  email     String       @unique
  password  String
  schoolId  String
  function  UserFunction @default(ADMIN)
  token     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("users")
}

model Student {
  id                    String                 @id
  name                  String
  email                 String                 @unique
  password              String?
  number                Int                    @unique
  enrolledAt            String
  driverLicenseCategory DriverLicenseCategory?
  schoolId              String
  paymentId             String?                @unique
  token                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  scheduledClass        ScheduledClass[]
  payment               Payment?               @relation(fields: [paymentId], references: [id])
  school                School                 @relation(fields: [schoolId], references: [id])

  @@map("students")
}

model ScheduledClass {
  id             String               @id
  schedulingDate String
  schedulingHour String
  status         ScheduledClassStatus @default(PENDING)
  studentId      String
  classId        String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  class          Class                @relation(fields: [classId], references: [id])
  student        Student              @relation(fields: [studentId], references: [id])

  @@map("scheduled_classes")
}

model Test {
  id        String       @id
  testDate  String
  testHour  String
  status    TestStatus   @default(MARKED)
  category  TestCategory @default(THEORETICAL)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("tests")
}

model Payment {
  id           String         @id
  method       PaymentMethod  @default(INCASH)
  total        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  installments Installments[]
  student      Student?

  @@map("payments")
}

model Installments {
  id                            String   @id
  valueOfAnInstallment          Int
  amountOfInstallments          Int
  amountOfInstallmentsPaid      Int
  amountOfRemainingInstallments Int
  paymentId                     String
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  payment                       Payment  @relation(fields: [paymentId], references: [id])

  @@map("installments")
}

enum UserFunction {
  ADMIN
  DIRECTOR
  STRUCTURER
}

enum DriverLicenseCategory {
  A
  B
  C
  ALL
}

enum ScheduledClassStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum TestStatus {
  APPROVED
  DISAPPROVED
  MARKED
}

enum TestCategory {
  THEORETICAL
  PRACTICAL
}

enum PaymentMethod {
  INSTALLMENTS
  INCASH
}
